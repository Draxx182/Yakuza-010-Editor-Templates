//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: cth.bt
//   Authors: Timo654
//   Version: 1.0
//   Purpose: Parse .cth files
//  Category: 
// File Mask: *.cth
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../Common/includes/include.h"

local u32 headerColor = SetRandomBackColor();

typedef struct
{
    SetBackColor( headerColor );

    BigEndian();
    char Magic[4];  // CTH1

    u16 EndianCheck <format=hex>;
    u16 Empty;
    u32 Version;
	u32 Size;
    u16 Unk0;
	u16 Empty2;
	u16 Unk1;
	u16 Unk2;
	u32 TextureCount;
	u32 TextureList;
	u32 BoneCount;
	u32 BoneList;
	u32 Unk1Count;
	u32 Unk1Pointer;
	u32 Unk2Count;
	u32 Unk2Pointer;
	u32 Unk3Count;
	u32 Unk3Pointer;
	
	struct
    {
        struct TShader Shader;
    } Shader;

    {
        local int i;
         struct
        {
          for ( i = 0; i < TextureCount; i++ )
            {
                struct TTex Texture;
            }
         } Textures;
    }
	
	{
        local int u;
         struct
        {
          for ( u = 0; u < BoneCount; u++ )
            {
                struct TBone Bone;
            }
         } Bones;
    }
	
	{
        local int e;
         struct
        {
          for ( e = 0; e < Unk1Count; e++ )
            {
                struct TUnk1 Unk1;
            }
         } Unk1;
    }
	
	{
        local int a;
         struct
        {
          for ( a = 0; a < Unk2Count; a++ )
            {
                struct TUnk2 Unk2;
            }
         } Unk2;
    }
	
	{
        local int o;
         struct
        {
          for ( o = 0; o < Unk3Count; o++ )
            {
                struct TUnk3 Unk3;
            }
         } Unk2;
    }
    
} TCth <optimize=false>;

typedef struct
{
	SetRandomBackColor();
    u16 Checksum;
	char ShaderName[30];
	u32 Empty3;
	u16 Unk3;
	u16 Unk4;
	u16 Unk5;
	u16 Unk6;
	u32 Empty4;
	u32 Unk7;
	u32 Unk8;
	u32 Unk9;
	u32 Unk10;
	u32 Empty5[8];
	float Unk11;
	float Unk12;
	u32 Empty6[22];
    
    
} TShader <read=ReadShader>;

typedef struct
{
	SetRandomBackColor();
    u16 Checksum;
	char TextureName[30];
} TTex <read=ReadTexture>;

typedef struct
{
	SetRandomBackColor();
    u16 Checksum;
	char BoneName[30];
	s32 Unk13;
	s32 ChildIndex;
	s32 SiblingIndex;
	u32 Unk14;
	float LocalPosX;
	float LocalPosY;
	float LocalPosZ;
	float LocalPosW;
	float LocalRotX;
	float LocalRotY;
	float LocalRotZ;
	float LocalRotW;
	float LocalScaleX;
	float LocalScaleY;
	float LocalScaleZ;
	float LocalScaleW;
    
    
} TBone <read=ReadBone>;

typedef struct
{
	SetRandomBackColor();
    float Unk21;
	float Unk22;
	float Unk23;
	u32 Empty10[3];
	u32 Unk24;
	u32 Unk25;
	float Unk26;
	u32 Unk27;
	u32 Empty11[6];
	float Unk28;
	float Unk29;
	u32 Empty12[6];
	float Unk30;
	float Unk31;
	u32 Empty13[6];
	float Unk32;
	float Unk33;
	u32 Empty14[6];
	float Unk34;
	float Unk35;
	u32 Empty15[6];
    
    
} TUnk1;

typedef struct
{
	SetRandomBackColor();
    float Unk36;
	float Unk37;
	float Unk38;
	u32 Empty16;
    
    
} TUnk2;

typedef struct
{
	SetRandomBackColor();
    float Unk37;
	float Unk38;
	float Unk39;
	u32 Empty17;
    
    
} TUnk3;

string ReadShader( TShader& value )
{
    local string shader = "";
    
    SPrintf( shader, "%s",
        value.ShaderName);
    
    return shader;
    
}

string ReadTexture( TTex& value )
{
    local string tex = "";
    
    SPrintf( tex, "%s",
        value.TextureName);
    
    return tex;
    
}

string ReadBone( TBone& value )
{
    local string bone = "";
    
    SPrintf( bone, "%s",
        value.BoneName);
    
    return bone;
    
}

TCth Cth;
